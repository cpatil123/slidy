h4('H4 Text')
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text')
)
))
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
shinyUI(pageWithSidebar(
headerPanel("Illustrating inputs"),
sidebarPanel(
numericInput('id1', 'Numeric input, labeled id1', 0, min = 0, max = 10, step\
= 1),
checkboxGroupInput("id2", "Checkbox",
c("Value 1" = "1",
"Value 2" = "2",
"Value 3" = "3")),
dateInput("date", "Date:")
),
mainPanel(
)
))
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
install.packages("UsingR")
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='cpatil',
token='cpatil',
secret='1234')
devtools::install_github('rstudio/shinyapps')
PackageUrl <- "https://cran.r-project.org/src/contrib/rlang_0.4.6.tar.gz"
install.packages(PackageUrl, repos=NULL, type="source")
devtools::install_github('rstudio/shinyapps')
library(rlang)
sessionInfo()
remove.packages(rlang)
rlang()
remove.packages("rlang", lib="~/R/win-library/3.6")
PackageUrl <- "https://cran.r-project.org/src/contrib/rlang_0.4.6.tar.gz"
install.packages(PackageUrl, repos=NULL, type="source")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
shinyapps::setAccountInfo(name='cpatil',
token='cpatil',
secret='1234')
install.packages('rsconnect')
library(rsconnect)
library(devtools)
rsconnect::deployApp('C:\aLearning\Data-Science\Data-Science-Coursera-Coursera\Course-Notes-Code-Assignments\Mod_9_Devp-Data-Products\W1')
rsconnect::deployApp('C:\\aLearning\\Data-Science\\Data-Science-Coursera-Coursera\\Course-Notes-Code-Assignments\\Mod_9_Devp-Data-Products\\W1')
rsconnect::setAccountInfo(name='cpatil', token='6F87DD7C571F5974E8DA7788A4E9885F', secret='DjwzWooPLxscStMLIk+u7CEbVPpRBj5+Xo71ReXh')
rsconnect::deployApp('C:\\aLearning\\Data-Science\\Data-Science-Coursera-Coursera\\Course-Notes-Code-Assignments\\Mod_9_Devp-Data-Products\\W1')
library(ggplot2)
deployApp()
shiny::runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
rsconnect::deployApp('C:\\aLearning\\Data-Science\\Data-Science-Coursera-Coursera\\Course-Notes-Code-Assignments\\Mod_9_Devp-Data-Products\\W1')
x
x<- 0
x
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
library(googleVis)
M = gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height \
= 400))
plot(m)
M = gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
plot(m)
plot(M)
M = gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
m
M
plot(M)
plot(M)
print(M)
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
library(googleVis)
M = gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
plot(M)
print(M)
plot(M)
library(rcharts)
install(rcharts)
require(rCharts)
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=43.1594, lng= -79.2469, popup="My Office")
my_map
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=28.644800, lng= 77.216721, popup="My capital")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=28.644800, lng= 77.216721, popup="My capital")
my_map
---
title: "M9-W2-Project-Leaflet"
author: "Channaveer Patil"
date: "6/7/2020"
output: html_document
---
```
{r Leaflet, echo=TRUE}
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=28.644800, lng= 77.216721, popup="My capital")
my_map
```
{r Leaflet, echo=False}
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=28.644800, lng= 77.216721, popup="My capital")
my_map
---
title: "M9-W2-Project-Leaflet"
author: "Channaveer Patil"
date: "6/7/2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```
{r Leaflet, echo=False}
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=28.644800, lng= 77.216721, popup="My capital")
my_map
```
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
---
title: "M9-W2-Project-Leaflet"
author: "Channaveer Patil"
date: "6/7/2020"
output: html_document
---
```
{r Leaflet, echo=TRUE}
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=28.644800, lng= 77.216721, popup="My capital")
my_map
```
---
title: "M9-W2-Project-Leaflet"
author: "Channaveer Patil"
date: "6/7/2020"
output: html_document
---
```
{r leaflet, echo=TRUE}
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=28.644800, lng= 77.216721, popup="My capital")
my_map
```
place <- c("16 Buckingham Drive", "Eastampton Community School", "Rancocas Valley Regional High School", "Buttonwood Park", "Rutgers University", "University of California, Los Anglees", "10941 Strathmore Drive", "Aurora", "Coffee Bean", "many dollars spent, many books unread, much music heard", "St. Agnes Hospital", "Talvandi Arain", "Sialkot, Punjab", "Dharamsala, Himachal Pradesh", "Magnolia Hotel", "Wu Tang Klang", "Shrine of Bullhe Shah", "St. Joseph Hospital", "Lahore, Punjab", "Ratajoa (Pool of Blood)" )
place_links <- c("<a href='https://www.gps-coordinates.net/street-view/@39.992445,-74.765458,h182,p5,z1'>Home</a>", "<a href='http://www.eastampton.k12.nj.us/'>Primary</a>", "<a href='http://rvrhs.com/'>High School</a>", "<a href='https://www.youtube.com/watch?v=WH_PC4UOoY4'>Tennis</a>", "<a href='http://newbrunswick.rutgers.edu/?utm_source=rutgers.edu&utm_medium=web&utm_campaign=uwide_sliver'>College</a>", "<a href='http://socialsciences.ucla.edu/departments/'>UCLA</a>", "<a href='https://en.wikipedia.org/wiki/Bhavacakra'>Westwood</a>", "<a href='http://cherrycreekschools.org/Pages/default.aspx'>Centennial</a>", "<a href='https://psychcentral.com/blog/archives/2012/04/15/caffeines-effects-on-your-thinking/'>many cups of joe</a>", "<a href='https://shop.uclastore.com/c-318-bookzone.aspx'>many dollars spent, many books unread</a>", "<a href='http://www.stagnes.org/150/'>where it all began</a>", "<a href='https://en.wikipedia.org/wiki/Partition_of_India'>daadkay dee praanee pind</a>", "
<a href='https://en.wikipedia.org/wiki/Sialkot'>Ami day naandkay</a>", "<a href='https://www.youtube.com/watch?v=nWY0Tyhu9MM'>Madhyamaka</a>", "<a href='http://www.starwoodhotels.com/gx/property/overview/index.html?propertyID=4703&SWAQ=958P'>The Special Day</a>", "<a href='https://en.wikipedia.org/wiki/Klang_(city)'>Klang</a>", "<a href='https://www.youtube.com/watch?v=B-pTz8ZM0nw'>Bullhe Shah</a>", "<a href='https://www.sclhealth.org/locations/saint-joseph-hospital/'>My Seeds</a>", "<a href='https://en.wikipedia.org/wiki/Lahore'>Lahore</a>", "<a href='http://press.princeton.edu/titles/4250.html'>Pind</a>")
lat <- c(39.9921999, 39.99891909999999, 40.0024695, 39.99760750000001, 40.5203204, 34.068921,
34.0672062, 39.615245, 39.615245, 34.0627396, 39.9260163, 31.5188331, 31.5188331,
32.5179603, 32.21904200000001, 3.044917, 31.12107223150165, 39.7464498, 31.4054167, 31.1914511)
lng <- c(-74.76549999999997, -74.75457560000001, -74.7829026, -74.7633318, -74.43591049999998,
-118.44518110000001, -118.45007800000002, -104.79553599999997, -118.44504139999998, -118.44456500000001,
-75.1697964, 75.74659750000001, 74.50091680000003, 76.32340369999997, -104.99235140000002,
101.44556209999996, 74.44769382476807, -104.9715971, 74.16363130000002, 74.05791850000003)
df <- data.frame(place, place_links, lat, lng)
library(leaflet)
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(lat=lat, lng=lng, popup=place_links, clusterOptions=markerClusterOptions)
x <- rnorm(100)
y <- x+rnorm(100)
fit <- lm(y~x)
fit
class(fit)
methods(mean())
methods("mean")
showMethods("show")
set.seed(2)
x<- rnorm(100)
mean(x)
head(getS3method("mean","default"), 10)
library(plotly)
df = data.frame(Instructor=c("Brian", "Roger", "Jef"),
Age=c(43,39,34),
Twitter=c(7.9,22.4,13.9))
bar = gvisBarChart(df, xvar="Instructor", yvar=c("Age","Twitter"))
bar
library(plotly)
## Create a simple data set
df = data.frame(Instructor=c("Brian", "Roger", "Jef"),
Age=c(43,39,34),
Twitter=c(7.9,22.4,13.9))
bar = gvisBarChart(df, xvar="Instructor", yvar=c("Age","Twitter"))
bar
library(datasets)
library(plotly)
library(reshape2)
data("airquality")  ## Load the airquality dataset
airquality$Month = as.factor(airquality$Month)  ## Convert Month to factor
ozone_daily = airquality[, c(1, 5, 6)]  ## Extract Ozone, Month and Day columns
ozone_daily = dcast(ozone_daily, Day ~ Month, value.var = "Ozone")
ozone_daily = as.matrix(ozone_daily[, -1])  ## Convert to Matrix
colnames(ozone_daily) = c("May", "June", "July", "August", "September")
plot_ly(z = ozone_daily, colorscale = "Hot", x = colnames(ozone_daily),
type = "heatmap", colorbar = list(title = "Ozone Levels (parts per billion)")) %>%
layout(title = "Daily Ozone Levels in New York, May to September 1973",
xaxis = list(title = "Month"), yaxis = list(title = "Day"))
library(plotly)
f <- list(
family = "Courier New, monospace",
size = 11,   color = "#6e6e6e" )
x <- list(
title = "Weight (1000 lbs)",   titlefont = f )
y <- list(
title = "Mileage per gallon",   titlefont = f )
plot_ly(mtcars, x = mtcars$wt, y=mtcars$mpg, mode="markers",
type="scatter",color=as.factor(mtcars$cyl), size=mtcars$hp ) %>%
layout(xaxis=x, yaxis=y)
library(plotly)
fig <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)
fig
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
---
title: "M9-W3-Project-Interactive-Plotly"
author: "Channaveer Patil"
date: "6/17/2020"
output: ioslides_presentation
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```
# Plotting 'Mileage / Gallon' vs 'Weight (1000 lbs)', by '# of Cylinders'
```{r, eval=FALSE}
library(plotly)
```
```{r, echo=FALSE}
library(plotly)
```
```{r, echo=TRUE}
f <- list(family = "Courier New, monospace", size = 11, color = "#6e6e6e" )
x <- list(title = "Weight (1000 lbs)",   titlefont = f )
y <- list(title = "Mileage per Gallon",   titlefont = f )
```
```{r, eval=FALSE}
plot_ly(mtcars, x = mtcars$wt, y=mtcars$mpg, mode="markers", type="scatter", color=as.factor(mtcars$cyl), size=mtcars$hp) %>% layout(xaxis=x, yaxis=y)
```
# Plotting
```{r, echo=FALSE}
plot_ly(mtcars, x = mtcars$wt, y=mtcars$mpg, mode="markers",showlegend=TRUE, type="scatter",color=as.factor(mtcars$cyl), size=mtcars$hp ) %>% layout(xaxis=x, yaxis=y)
```
shiny::runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
library(shiny)
library(shiny)
x <<- x + 1
y <<- 0
shinyServer(
function(input, output) {
y <<- y + 1
output$text1 <- renderText({input$text1})
output$text2 <- renderText({input$text2})
output$text3 <- renderText({as.numeric(input$text1)+1})
output$text4 <- renderText(y)
output$text5 <- renderText(x)
}
)
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId="text1", label = "Input Text1"),
textInput(inputId="text2", label = "Input Text2")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3'),
p('Outside text'),
textOutput('text4'),
p('Inside text, but non-reactive'),
textOutput('text5')
)
))
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
# HorsePower Pred Server.r
library(shiny)
shinyServer(function(input, output)
{
mtcars$mpgsp <- ifelse(mtcars$mpg - 20 > 0, mtcars$mpg,
model1 <- lm(hp ~ mpg, data = mtcars),
model2 <- lm(hp ~ mpgsp + mpg, data = mtcars),
model1pred <- reactive)
})
({
mpgInput <- input$sliderMPG
predict(model1, newdata = data.frame(mpg = mpgInput))
})
model2pred <- reactive
({
mpgInput <- input$sliderMPG
predict(model2, newdata = data.frame(mpg = mpgInput, mpgsp = ifelse(mpgInput - 20 > 0, mpgInput - 20, 0)))
})
output$plot1 <- renderPlot
(
mpgInput <- input$sliderMPG,
plot(mtcars$mpg, mtcars$hp, xlab = "Miles Per Gallon",
ylab = "Horsepower", bty = "n", pch = 16,
xlim = c(10, 35), ylim = c(50, 350))
if(input$showModel1)
{
abline(model1, col = "red", lwd = 2)
}
if(input$showModel2)
{
model2lines <- predict(model2, newdata = data.frame(mpg = 10:35, mpgsp = ifelse (10:35 - 20 > 0,
10:35 - ))
lines(10:35, model2lines, col = "blue", lwd = 2)
}
legend(25, 250, c("Model 1 Prediction", "Model 2 Prediction"), col = c("red", "blue"), bty = "n", cex = 1.2)
points(mpgInput, model1pred(), col = "red", pch = 16, cex points(mpgInput, model2pred(), col = "blue", pch = 16,
})
output$pred1 <- renderText
({
model1pred()
})
output$pred2 <- renderText
({
model2pred()
})
})
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
shiny::runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W1')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
fluidPage(
titlePanel("Plot Random Numbers"),
sidebarLayout(
sidebarPanel(
numericInput("num_points", "How Many Random Numbers Should be Plotted?",
value = 1000, min = 1, max = 1000, step = 1),
sliderInput("sliderX", "Pick Minimum and Maximum X Values",
-100, 100, value = c(-50, 50)),
sliderInput("sliderY", "Pick Minimum and Maximum Y Values",
-100, 100, value = c(-50, 50)),
checkboxInput("show_xlab", "Show/Hide X Axis Label", value = TRUE),
checkboxInput("show_ylab", "Show/Hide Y Axis Label", value = TRUE),
checkboxInput("show_title", "Show/Hide Title")
),
mainPanel(
h3("Graph of Random Points"),
plotOutput("plot1")
)
)
)
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
runApp('C:/aLearning/Data-Science/Data-Science-Coursera-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
runExample("01_hello") # a histogram
library(shiny)
runExample("01_hello") # a histogram
runExample("04_mpg") # global var
runApp('C:/aLearning/Data-Science/Data-Science-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
# Chunk 1
library(shiny)
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot = renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
# Chunk 1
library(shiny)
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot = renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
# Chunk 1
library(shiny)
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot = renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
# Chunk 2
plot(cars)
# Chunk 1
library(shiny)
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot = renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
# Chunk 2
plot(cars)
# Chunk 1
library(shiny)
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot = renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
# Chunk 2
plot(cars)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
runApp('C:/aLearning/Data-Science/Data-Science-Coursera/Course-Notes-Code-Assignments/Mod_9_Devp-Data-Products/W4')
print(abc)
print("abc")
update.packages(ask='graphics',checkBuilt=TRUE)
update.packages(ask='graphics',checkBuilt=TRUE)
q()
update.packages(ask='graphics',checkBuilt=TRUE)
q()
knitr::opts_chunk$set(echo = FALSE)
library(shiny)
browseURL("index.html")
getwd()
setwd("C:\Users\H138973\Documents\mydeck")
setwd("C:\\Users\H138973\Documents\mydeck")
setwd("C:\\Users\\H138973\\Documents\\mydeck")
getwd()
browseURL("index.html")
publish_rpubs("slidy", html_file = "index.html")
